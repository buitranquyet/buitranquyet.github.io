<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post-rss on Quyet Bui</title>
    <link>http://quyetbui.info/post/index.xml</link>
    <description>Recent content in Post-rss on Quyet Bui</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>All rights reserved - 2016</copyright>
    <lastBuildDate>Wed, 16 Nov 2016 19:42:28 +0700</lastBuildDate>
    <atom:link href="http://quyetbui.info/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>My notes on Rails performance</title>
      <link>http://quyetbui.info/note-on-rails-performance/</link>
      <pubDate>Wed, 16 Nov 2016 19:42:28 +0700</pubDate>
      
      <guid>http://quyetbui.info/note-on-rails-performance/</guid>
      <description>&lt;p&gt;This post is my notes about improving performance of Ruby on Rails app. For caching/N+1&amp;hellip;, I am just providing general information, not too much details. Nginx/Rails Server(Unicorn/Puma) is related to performance but also other story.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;caching&#34;&gt;Caching&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Caching is the most effective way to improve performance of your app. You should try to cache as much as possible. Technically, implement caching in Rails is quite easy but strategry for invalidating the cache sometimes can be tricky, just like a saying: &lt;em&gt;&amp;ldquo;There are only two hard things in Computer Science: cache invalidation and naming things&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;From my experience, I usually use &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;updated_at&lt;/code&gt; in cache key and &lt;code&gt;touch&lt;/code&gt; the object when we need to expire the cache. May be &lt;code&gt;.touch&lt;/code&gt; manually in a specific context, in a &lt;code&gt;callback&lt;/code&gt; or with the association option &lt;code&gt;belongs_to :some_model, touch: true&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;n-1&#34;&gt;N+1&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;As its name said, it&amp;rsquo;s expected to make one query but N other additional queries are fired instead, so your database will be flooded with queries and you app will be slow. N+1 is a very common performance issue. To fix N+1 issue, we usually use &lt;code&gt;eager loading&lt;/code&gt; technique.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To eliminating N+1 issue, I see &lt;a href=&#34;https://github.com/flyerhzm/bullet&#34;&gt;&lt;code&gt;bullet&lt;/code&gt;&lt;/a&gt; gem is the best tool. We can configure &lt;code&gt;bullet&lt;/code&gt; to notice us the problem via many ways, for example a javascript alert, a footer at the bottom of the page, in the log&amp;hellip;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;But please note that, although N+1 is usually bad, but it&amp;rsquo;s not always true. For huge tables and complicated relationship, fixing N+1 with &lt;code&gt;eager loading&lt;/code&gt; can make less query but it&amp;rsquo;s complex and slow query. Also if we can do caching properly, the N+1 code but with cache might give better performance than a none N+1 code.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ruby-is-usually-slower-than-sql&#34;&gt;Ruby is usually slower than SQL.&lt;/h2&gt;

&lt;p&gt;I know that you are a Ruby developer and you can solve the complex issues in a neat way with Ruby. But actually, in a Ruby on Rails app, you should try to do the things in SQL instead of Ruby. SQL is usually faster than Ruby. Bellow is few very simple examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you want to calculate a sum: &lt;code&gt;Deal.active.sum(&amp;amp;:quantity)&lt;/code&gt; is much slower than &lt;code&gt;Deal.active.sum(:quantity)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Explain: the first one will load all the active &lt;code&gt;deals&lt;/code&gt; into Rails model and then calculate the sum on the array of Ruby objects, meanwhile in the later SQL do the calculation part and just give the result to Rails&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Or another example: &lt;code&gt;Deal.pluck(:user_id).uniq&lt;/code&gt; is much slower than &lt;code&gt;Deal.uniq.pluck(:user_id)&lt;/code&gt;, although they look very similar.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Explain: the first one load all &lt;code&gt;user_id&lt;/code&gt; to Ruby array and Ruby do unique in the array. Meanwhile the later, SQL do a &lt;code&gt;SELECT DISTINCT&lt;/code&gt; command to find &lt;code&gt;user_id&lt;/code&gt;, Ruby just load results into an array.&lt;/p&gt;

&lt;h2 id=&#34;db-index&#34;&gt;DB index&lt;/h2&gt;

&lt;p&gt;Adding index properly will help you querying data much faster. A simple rule is you should add index to all the foreign keys (&lt;code&gt;something_id&lt;/code&gt; field) and if you have &lt;code&gt;.where(column_name: ...)&lt;/code&gt; then you should add index to &lt;code&gt;column_name&lt;/code&gt;&amp;hellip;
However, it&amp;rsquo;s a trade off, you should understand with indexes, your DB will take more diskspace and also the speed of &lt;code&gt;insert&lt;/code&gt; command will be decreased. So, read faster but more disk space + write slower.&lt;/p&gt;

&lt;h2 id=&#34;memoization&#34;&gt;Memoization:&lt;/h2&gt;

&lt;p&gt;If you have a helper method in controller:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def current_account
  Account.find_by(subdomain: subdomain)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and you call &lt;code&gt;current_account.something&lt;/code&gt; multiple times in the view, then SQL query for loading account will be fired many times. SQL query will be cached so later queries are very very fast. But it&amp;rsquo;s better not having those. To avoid those extra SQL queries, you can do a &lt;code&gt;memoization&lt;/code&gt; here:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def current_account
  @current_account ||= Account.find_by(subdomain: subdomain)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;only-select-what-you-need&#34;&gt;Only select what you need&lt;/h2&gt;

&lt;p&gt;For example, a &lt;code&gt;User&lt;/code&gt; model have many fields (bio, occupation&amp;hellip;), but for a view you just need name/email). Usually you do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; # in controller:
 @users = User.where(...).page(param[:page]).per(params[:per])
 
 # in the view
 - @users.each do |user|
 ... user.name
 ... user.email
  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is very common but actually you loaded all fields of users from SQL to Rails so it takes more memory and also more information need to transfer from your database server (i.e. RDS) to your rails server (i.e. EC2).
In this case, since you only need &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;email&lt;/code&gt;, it&amp;rsquo;s better to write:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@users = User.select(:name, :email).where(...)...&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Just a small gain, but it&amp;rsquo;s still better&lt;/p&gt;

&lt;h2 id=&#34;tools&#34;&gt;Tools:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Personally, I see &lt;code&gt;NewRelic&lt;/code&gt; is the most valuable tool for improving performance of Rails app. In the production environment, they provide many charts with many useful information that you should spend times to analyze. At the development environment, you can visit &lt;code&gt;http://localhost:3000/newrelic&lt;/code&gt; to start profiling and see report of SQL queries.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Besides &lt;code&gt;bullet&lt;/code&gt; and NewRelic some other tools that might be useful for profiling your Rails/Ruby app.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/MiniProfiler/rack-mini-profiler&#34;&gt;https://github.com/MiniProfiler/rack-mini-profiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dejan/rails_panel&#34;&gt;https://github.com/dejan/rails_panel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ruby-prof/ruby-prof&#34;&gt;https://github.com/ruby-prof/ruby-prof&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Improve code quality of Rails app with Continuous Integration and some tools</title>
      <link>http://quyetbui.info/improve-code-quanlity-rails-app/</link>
      <pubDate>Wed, 09 Nov 2016 20:52:19 +0700</pubDate>
      
      <guid>http://quyetbui.info/improve-code-quanlity-rails-app/</guid>
      <description>&lt;p&gt;In this post, I will introduce some tools that I believe can help your team improve/ensure code quality for your Ruby on Rails project and my experience using them.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;To use these tools, ideally you should use Continuous Integration service such as TravisCI, CircleCI&amp;hellip;Each team member should always work on a new git branch for a new feature, get the CI build green (passing) and doing code review when making a pull request to merge the code.&lt;/p&gt;

&lt;p&gt;If your team already use &lt;a href=&#34;codeclimate.com&#34;&gt;CodeClimate&lt;/a&gt;, you don&amp;rsquo;t need to read this. Since these tools are actually just the engines under CodeClimate (and more than for example &lt;a href=&#34;https://github.com/troessner/reek&#34;&gt;Reek&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&#34;rubocop-https-github-com-bbatsov-rubocop&#34;&gt;&lt;a href=&#34;https://github.com/bbatsov/rubocop&#34;&gt;Rubocop&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;In Ruby/Rails community coding style such as &lt;a href=&#34;https://github.com/bbatsov/ruby-style-guide&#34;&gt;ruby-style-guide&lt;/a&gt;, &lt;a href=&#34;https://github.com/bbatsov/rails-style-guide&#34;&gt;rails-style-guide&lt;/a&gt; are used widely. Generally it&amp;rsquo;s a rule that everyone in the team should follow these code conventions. Rubocop help checking for these rules automatically, so help the team maintain better coding style.&lt;/p&gt;

&lt;p&gt;Some tips:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rubocop support auto-correct for some cops so you can use&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;rubocop --auto-correct&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;to automatically correct the issues. This feature is very helpful with minor coding style issues such as with indentations, spaces, empty lines&amp;hellip;However, you shoud review the changes since sometimes rubocop might change/delete some piece of code in unexpected way.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you use RSpec, &lt;a href=&#34;https://github.com/backus/rubocop-rspec&#34;&gt;https://github.com/backus/rubocop-rspec&lt;/a&gt; is also an addition tool for analysing your RSpec code&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The default config for rubocop can be found &lt;a href=&#34;https://github.com/bbatsov/rubocop/blob/master/config&#34;&gt;here&lt;/a&gt;.
Although it&amp;rsquo;s better if you can follow all the default config, but those rules are very strict and somewhat too hard to satisfy (for me) so you might want update the config by creating &lt;code&gt;.rubocop.yml&lt;/code&gt; file in your project and modify according to, for example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;Rails:
  Enabled: true
    
Metrics/AbcSize:
  Max: 20
    
Metrics/MethodLength:
  Exclude:
    - &#39;db/migrate/*&#39;
  Max: 10
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information you can read the doc at &lt;a href=&#34;http://rubocop.readthedocs.io/&#34;&gt;http://rubocop.readthedocs.io/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;rails-best-practices-https-github-com-railsbp-rails-best-practices&#34;&gt;&lt;a href=&#34;https://github.com/railsbp/rails_best_practices&#34;&gt;Rails best practices&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Rails community has a set of things called &lt;a href=&#34;rails-bestpractices.com&#34;&gt;best practices&lt;/a&gt;, &lt;a href=&#34;https://github.com/railsbp/rails_best_practices&#34;&gt;this gem&lt;/a&gt; will help you check some of those things automatically, for example it can suggest you to remove an unused method, add missing index to a foreign key column, point out a line of code that violates the law of demeter&amp;hellip;&lt;/p&gt;

&lt;p&gt;Tips: Similar to Rubocop, you can also add a file &lt;code&gt;config/rails_best_practices.yml&lt;/code&gt; to disable some false positive checks.&lt;/p&gt;

&lt;h2 id=&#34;brakeman-https-github-com-presidentbeef-brakeman&#34;&gt;&lt;a href=&#34;https://github.com/presidentbeef/brakeman&#34;&gt;Brakeman&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Brakeman is a tool to scan for security vulnerabilities in your code. It give false positive sometimes but in general it&amp;rsquo;s a very good tool and I highly recommended.&lt;/p&gt;

&lt;p&gt;Tips: If you have a false positive or you understand about the issue and want to ignore, you can create &lt;code&gt;config/brakeman.ignore&lt;/code&gt; (by &lt;code&gt;brakeman -I&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;For more information, brakeman&amp;rsquo;s website is at
&lt;a href=&#34;http://brakemanscanner.org/&#34;&gt;http://brakemanscanner.org/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;bundler-audit-https-github-com-rubysec-bundler-audit&#34;&gt;&lt;a href=&#34;https://github.com/rubysec/bundler-audit&#34;&gt;Bundler Audit&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Bundler audit is a gem that checks for vulnerable versions of gems and insecure gem sources.&lt;/p&gt;

&lt;p&gt;Many developer are lazy to update gems and/or they are afraid that updating gems will break the system, as result, I saw many projects with very outdated version of gems, many with security issues. So I believe that it&amp;rsquo;s better to have &lt;code&gt;bundler-audit&lt;/code&gt; automatically scan for gem with issue and make the travis build failed. Developer will notice the problem and update gems.&lt;/p&gt;

&lt;p&gt;I usually use this gem in the CI with the following command.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bundle exec bundle-audit check --update&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;flay-https-github-com-seattlerb-flay&#34;&gt;&lt;a href=&#34;https://github.com/seattlerb/flay&#34;&gt;Flay&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Flay is a tool that help identify duplications in your code. CodeClimate also use this for their code duplication analysis. Generally this can be an &lt;em&gt;optional check&lt;/em&gt;, but making it&amp;rsquo;s as a required check in CI can help force developer more focus on refactoring to DRY their code to fix duplication issues.&lt;/p&gt;

&lt;p&gt;To use Flay with CI, we can add a rake task (&lt;code&gt;lib/tasks/flay.rake&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;task :flay do
  puts &#39;Checking for code duplication&#39;
  output = `bundle exec flay --mass 40 app/`

  if output.include? &#39;Similar code found&#39;
    puts output
    exit 1
  end
end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &lt;code&gt;40&lt;/code&gt; is threshold for the mass, lower is better but you might want to change this value if you need.&lt;/p&gt;

&lt;p&gt;In the CI enviroment, we can use &lt;code&gt;bundle exec rake flay&lt;/code&gt; to require checking for code duplication.&lt;/p&gt;

&lt;h2 id=&#34;simplecov-https-github-com-colszowka-simplecov&#34;&gt;&lt;a href=&#34;https://github.com/colszowka/simplecov&#34;&gt;SimpleCov&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;SimpleCov not only provides you a nicely report of the your test coverage (at &lt;code&gt;/coverage/index.html&lt;/code&gt;), it also helps you to ensure a good test coverage in your project. For example with the following setup:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# top of your rails_helper or spec_helper
require &#39;simplecov&#39;
SimpleCov.start &#39;rails&#39; do
  minimum_coverage         95
  minimum_coverage_by_file 80
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then if someone made pull request, that drop the coverage of the test suite to bellow 95% or that has a file with 80% of lines are tested, CI tool will fail the build even all tests are passed. A good team should aim for 100% for these value (it&amp;rsquo;s very hard, but you should do)&lt;/p&gt;

&lt;p&gt;Tip: if you want to ignore the check for a file you can add &lt;code&gt;add_filter &amp;quot;/some/file&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-s-your-ci-script&#34;&gt;What&amp;rsquo;s your CI script?&lt;/h2&gt;

&lt;p&gt;Besides those tools above, linter such as &lt;a href=&#34;https://github.com/brigade/haml-lint&#34;&gt;haml-lint&lt;/a&gt; (if you are using HAML) or &lt;a href=&#34;eslint.org&#34;&gt;eslint&lt;/a&gt; are surely also helpful for ensuring quality of your codebase.&lt;/p&gt;

&lt;p&gt;Just my personal preference, I would like to have this in CI script of every new Rails projects.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- bundle exec bundle-audit check --update
- bundle exec brakeman -Aqz
- bundle exec rails_best_practices
- bundle exec rake flay
- bundle exec rubocop
- bundle exec haml-lint app/views
- bundle exec rspec
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Phoenix and Rails equivalent commands</title>
      <link>http://quyetbui.info/phoenix-rails-commands/</link>
      <pubDate>Fri, 21 Oct 2016 21:52:35 +0700</pubDate>
      
      <guid>http://quyetbui.info/phoenix-rails-commands/</guid>
      <description>&lt;p&gt;Recently, I started trying with Elixir/Phoenix. There are many similar things between Ruby/Rails and Phoenix/Elixir. Here I started with some commands.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Elixir/Phoenix&lt;/th&gt;
&lt;th&gt;Ruby/Rails&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;iex&lt;/td&gt;
&lt;td&gt;irb&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;mix deps.get&lt;/td&gt;
&lt;td&gt;bundle install&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;mix phoenix.server&lt;/td&gt;
&lt;td&gt;rails server&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;iex -S mix phoenix.server&lt;/td&gt;
&lt;td&gt;rails console&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;mix ecto.migrate&lt;/td&gt;
&lt;td&gt;rake db:migrate&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;mix ecto.create&lt;/td&gt;
&lt;td&gt;rake db:create&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;mix ecto.rollback&lt;/td&gt;
&lt;td&gt;rake db:migrate&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;mix phoenix.gen.secret&lt;/td&gt;
&lt;td&gt;rake secret&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;mix phoenix.gen.model&lt;/td&gt;
&lt;td&gt;rails generate model&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;mix phoenix.gen.html&lt;/td&gt;
&lt;td&gt;rails g scaffold&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description>
    </item>
    
  </channel>
</rss>